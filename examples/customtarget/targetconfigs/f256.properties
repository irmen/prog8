# configuration file for a Foenix F256 Prog8 compilation target
# generates '.bin' files that are in '.pgz' Foenix format.

cpu = 65C02
encoding = iso
#output_type = LIBRARY
output_type = RAW
#load_address = $0200
#load_address = $1000
load_address = $2000
memtop = $c000
bss_highram_start = 0
bss_highram_end = 0
bss_goldenram_start = 0
bss_goldenram_end = 0

# io_regions specifies memory-mapped I/O registers that should be treated differentely.
# it can be zero or more memory address ranges (inclusive) separated by comma
io_regions = $c000-$dfff

# zeropage scratch variables. zp_scratch_reg must always be zp_scratch_b1+1 !
zp_scratch_b1 = $e2
zp_scratch_reg = $e3
zp_scratch_w1 = $e4
zp_scratch_w2 = $e6

# free zeropage locations for the various zp usage methods
# zero or more zeropage address ranges (inclusive).
#
# $00-$01 - memory & I/O control (MMU)
# $02-$07 - TODO: document (zp_scratch would fit here?)
# $08-$0f - additional (optional) hardware registers (TODO: find & document)
# ...
# $e8-$ef - event array (8 bytes for next event)
# $f0-$ff - kernel arguments table

zp_fullsafe = $22-$e7
zp_kernalsafe = $22-$e7
zp_basicsafe = $22-$e7

# the start of the 32 bytes used by the R0-R15 virtual registers. Can be in Zeropage or elsewhere.
virtual_registers = $10

# Where can we find the standard library (syslib.p8). You can still add more paths manually using -srcdirs
library = ./libraries/f256

# if a non-empty custom launcher code string is supplied, the compiler won't output ANY launcher / init code by itself,
# and instead outputs whatever is specified here. (You can use \n here for newline and \ for line continuantions)
custom_launcher_code =

# additional options passed to the assembler program
#assembler_options = --c256-pgx
assembler_options = --c256-pgz --output-exec=$2000 
#assembler_options = --output-exec=\$2000 --c256-pgz
#--c256-pgz --output main.pgz
